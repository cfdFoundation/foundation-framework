# Redis-only TCP proxy nginx configuration - Fixed for persistent connections
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# TCP/UDP proxy configuration for Redis ONLY
stream {
    # Logging for TCP connections
    log_format stream_format '$remote_addr [$time_local] '
                             '$protocol $status $bytes_sent $bytes_received '
                             '$session_time "$upstream_addr" '
                             '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /var/log/nginx/redis_access.log stream_format;
    error_log /var/log/nginx/redis_error.log warn;

    # Redis upstream configuration with persistent connections
    upstream redis_backend {
        server redis-1:6379 max_fails=2 fail_timeout=10s weight=1;
        server redis-2:6379 max_fails=2 fail_timeout=10s weight=1;
        # Easy to add more Redis nodes here in the future:
        # server redis-3:6379 max_fails=2 fail_timeout=10s weight=1;
        # server redis-4:6379 max_fails=2 fail_timeout=10s weight=1;
    }

    # Redis proxy server - API nodes connect to this
    server {
        listen 6379;
        proxy_pass redis_backend;
        
        # Fixed timeouts for Redis persistent connections
        proxy_timeout 300s;          # Increased from 3s to 5 minutes
        proxy_connect_timeout 5s;    # Increased connection timeout
        proxy_responses 1;           # Redis protocol expects 1 response per request
        
        # Enable connection pooling
        proxy_socket_keepalive on;
    }
}