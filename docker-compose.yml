version: '3.8'

services:
  # PostgreSQL Database (starts first)
  postgres:
    image: postgres:15-alpine
    container_name: api_postgres
    environment:
      - POSTGRES_DB=api_framework
      - POSTGRES_USER=api_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d
      - ./sql/backups:/backups
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "5432:5432"
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api_user -d api_framework"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Instance 1 (starts early)
  redis-1:
    image: redis:7-alpine
    container_name: api_redis_1
    ports:
      - "6381:6379"  # External access for debugging
    volumes:
      - redis_1_data:/data
      - ./logs/redis-1:/var/log/redis
    command: >
      redis-server 
      --requirepass redis_password_123
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_123", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis Instance 2 (starts early)  
  redis-2:
    image: redis:7-alpine
    container_name: api_redis_2
    ports:
      - "6382:6379"  # External access for debugging
    volumes:
      - redis_2_data:/data
      - ./logs/redis-2:/var/log/redis
    command: >
      redis-server 
      --requirepass redis_password_123
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_123", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis TCP Proxy (starts after Redis instances, before API nodes)
  redis-proxy:
    build: ./nginx-redis
    container_name: api_redis_proxy
    ports:
      - "6379:6379"    # Redis proxy port - API nodes connect here
    volumes:
      - ./logs/nginx-redis:/var/log/nginx
    depends_on:
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Node.js API Instance 1 (starts after Redis proxy is ready)
  api-node-1:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_node_1
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_NAME=node-1
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=api_framework
      - DB_USER=api_user
      - DB_PASSWORD=secure_password_123
      - DB_POOL_MIN=2
      - DB_POOL_MAX=10
      
      # Redis Configuration - Connect via Redis proxy
      - REDIS_HOST=redis-proxy
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password_123
      - REDIS_DB=0
      - REDIS_KEY_PREFIX=api_v2
      
      # Security Configuration
      - JWT_SECRET=super-secure-jwt-secret-change-in-production-chat3
      - ENCRYPTION_KEY=32-char-encryption-key-change-me!
      - HASH_ROUNDS=12
      
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_TO_DATABASE=true
      - LOG_TO_CONSOLE=true
      
      # Performance & Monitoring
      - ENABLE_METRICS=true
      - DEFAULT_RATE_LIMIT=1000/hour
      
      # CORS Configuration
      - ALLOWED_ORIGINS=http://localhost,http://localhost:3000,http://localhost:8080
      
    volumes:
      - ./logs/node-1:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis-proxy:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Node.js API Instance 2 (starts after api-node-1)
  api-node-2:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_node_2
    environment:
      - NODE_ENV=production
      - PORT=3000
      - INSTANCE_NAME=node-2
      
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=api_framework
      - DB_USER=api_user
      - DB_PASSWORD=secure_password_123
      - DB_POOL_MIN=2
      - DB_POOL_MAX=10
      
      # Redis Configuration - Connect via Redis proxy
      - REDIS_HOST=redis-proxy
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password_123
      - REDIS_DB=0
      - REDIS_KEY_PREFIX=api_v2
      
      # Security Configuration
      - JWT_SECRET=super-secure-jwt-secret-change-in-production-chat3
      - ENCRYPTION_KEY=32-char-encryption-key-change-me!
      - HASH_ROUNDS=12
      
      # Logging Configuration
      - LOG_LEVEL=info
      - LOG_TO_DATABASE=true
      - LOG_TO_CONSOLE=true
      
      # Performance & Monitoring
      - ENABLE_METRICS=true
      - DEFAULT_RATE_LIMIT=1000/hour
      
      # CORS Configuration
      - ALLOWED_ORIGINS=http://localhost,http://localhost:3000,http://localhost:8080
      
    volumes:
      - ./logs/node-2:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis-proxy:
        condition: service_healthy
      api-node-1:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # nginx HTTP Load Balancer (starts AFTER API nodes are ready)
  nginx:
    build: ./nginx
    container_name: api_nginx
    ports:
      - "80:80"        # HTTP API access
      - "443:443"      # HTTPS (future)
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      api-node-1:
        condition: service_healthy
      api-node-2:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 20s
      timeout: 5s
      retries: 3

  # Database Management UI
  adminer:
    image: adminer:latest
    container_name: api_adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped

  # Redis Management UI (connects directly to Redis instances for management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: api_redis_commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis-1:redis-1:6379:0:redis_password_123,redis-2:redis-2:6379:0:redis_password_123
    depends_on:
      redis-1:
        condition: service_healthy
      redis-2:
        condition: service_healthy
    networks:
      - api-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_1_data:
    driver: local
  redis_2_data:
    driver: local

networks:
  api-network:
    driver: bridge